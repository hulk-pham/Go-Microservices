package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"hulk/go-webservice/application/modules/user/commands"
	"hulk/go-webservice/application/modules/user/queries"
	"hulk/go-webservice/presentation/graph/model"
	"time"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserRequest) (*model.User, error) {

	var request commands.CreateUserDto

	dob, err := time.Parse(TIME_FORMAT, input.Dob)

	request = commands.CreateUserDto{
		FirstName:   input.FirstName,
		LastName:    input.LastName,
		Email:       input.Email,
		Password:    input.Password,
		Hobby:       input.Hobby,
		PhoneNumber: input.PhoneNumber,
		Address:     input.Address,
		Dob:         dob,
	}

	user, err := commands.CreateUserCommand(request)
	if err != nil {
		return nil, err
	}

	return ParseUser(user), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	usersQueries := queries.GetAllUserQuery()

	for i := range usersQueries {
		user := usersQueries[i]
		users = append(users, ParseUser(user))
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
