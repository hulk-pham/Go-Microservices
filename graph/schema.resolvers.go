package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"errors"
	"fmt"
	"hulk/go-webservice/common"
	"hulk/go-webservice/core/model"
	model1 "hulk/go-webservice/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model1.CreateUserRequest) (*model1.User, error) {
	duplicated := model.User{Email: input.Email}
	if r := common.DB.Where(&model.User{Email: input.Email}).First(&duplicated); r.RowsAffected > 0 {
		return nil, errors.New("Email already has been taken")
	}

	fmt.Print(input)
	var user model1.User
	user.FirstName = input.FirstName
	user.LastName = input.LastName
	user.Email = input.Email
	user.Address = input.Address
	user.Hobby = input.Hobby
	user.PhoneNumber = input.PhoneNumber
	user.Dob = input.Dob
	passwordHashed, err := common.HashPassword(input.Password)
	if err != nil {
		return nil, errors.New("Unable to hass password")
	}
	fmt.Print(passwordHashed)
	user.Password = passwordHashed

	common.DB.Create(&user)
	return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model1.User, error) {
	var users []*model1.User
	common.DB.Find(&users)
	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
